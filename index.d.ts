// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../react
//   ../../@brightsign/bsdatamodel
//   ../../redux

import * as React from 'react';
import { DmMediaState } from '@brightsign/bsdatamodel';
import { DmState } from '@brightsign/bsdatamodel';
import { DmZone } from '@brightsign/bsdatamodel';
import { DmEvent } from '@brightsign/bsdatamodel';
import { DmDerivedContentItem } from '@brightsign/bsdatamodel';
import { DmcZone } from '@brightsign/bsdatamodel';
import { Store } from 'redux';
import { Action, Dispatch, ActionCreator } from 'redux';
import { Reducer } from 'redux';

/** @module Controller:index */

/** @module Model:index */

/** @module Selector:index */

/** @module Types:index */

/** @internal */
export interface ImageProps {
    src: string;
    width: number;
    height: number;
}
export class ImageComponent extends React.Component<ImageProps> {
    render(): JSX.Element;
}
export const Image: React.ComponentClass<any> & {
    WrappedComponent: React.ComponentType<ImageProps>;
};

export interface VideoProps {
    width: number;
    height: number;
    onVideoEnd: () => void;
    src: string;
}
export class VideoComponent extends React.Component<VideoProps> {
    onVideoEnd(): void;
    render(): JSX.Element;
}
export const Video: React.ComponentClass<any> & {
    WrappedComponent: React.ComponentType<VideoProps>;
};

/** @internal */
export interface MediaZoneProps {
    key: string;
    bsdm: DmState;
    zone: DmZone;
    width: number;
    height: number;
    activeMediaStateId: string;
    postBSPMessage: any;
}
export default class MediaZoneComponent extends React.Component<MediaZoneProps> {
    postMediaEndEvent(): void;
    renderMediaItem(mediaState: DmMediaState, contentItem: DmDerivedContentItem): JSX.Element | null;
    getEvents(bsdm: DmState, mediaStateId: string): DmEvent[];
    render(): JSX.Element | null;
}
export const MediaZone: React.ComponentClass<any> & {
    WrappedComponent: React.ComponentType<MediaZoneProps>;
};

/** @internal */
export interface SignProps {
    bsdm: DmState;
}
export class SignComponent extends React.Component<SignProps> {
    getMediaZoneJSX(zone: DmcZone): object;
    getZoneJSX(zoneId: string): object | null;
    render(): JSX.Element;
}
export const Sign: React.ComponentClass<Pick<SignProps, "bsdm"> & undefined> & {
    WrappedComponent: React.ComponentType<SignProps>;
};

export let myApp: {};
export const App: React.ComponentClass<Pick<{
    bsdm: any;
    activeHStates: any;
} & null, never>> & {
    WrappedComponent: React.ComponentType<{
        bsdm: any;
        activeHStates: any;
    } & null>;
};

export const initModel: () => BsBrightSignPlayerModelThunkAction<Promise<any>>;
export const resetModel: () => BsBrightSignPlayerModelThunkAction<BsBrightSignPlayerModelAction<null>>;

export function initRuntime(store: Store<BsBrightSignPlayerState>): (dispatch: any, getState: Function) => Promise<void>;
export function getReduxStore(): Store<BsBrightSignPlayerState>;
export function getRuntimeFiles(): Promise<void>;
export function getPoolFilePath(fileName: string): string;
export function postRuntimeMessage(event: ArEventType): (dispatch: any, getState: Function) => void;
export function postMessage(event: ArEventType): (dispatch: any, getState: Function) => void;
export function dispatchHsmEvent(event: ArEventType): Function;

export const ADD_HSM = "ADD_HSM";
export function addHSM(hsm: HSM): {
    type: string;
    payload: HSM;
};
export const hsmReducer: (state: HSM[] | undefined, action: ActionWithPayload) => HSM[];

export const SET_ACTIVE_HSTATE = "SET_ACTIVE_HSTATE";
export function setActiveHState(hsmId: string, activeState: any): {
    type: string;
    payload: {
        hsmId: string;
        activeState: any;
    };
};
export const activeHStateReducer: (state: HStateMap | undefined, action: ActionWithPayload) => HStateMap;

/** @module Model:base */
/** @private */
export interface ActionWithPayload extends Action {
    payload: any;
}
/** @private */
export const BSBSBRIGHTSIGNPLAYERMODEL_BATCH = "BSBSBRIGHTSIGNPLAYERMODEL_BATCH";
/** @private */
export const BSBSBRIGHTSIGNPLAYERMODEL_REHYDRATE = "BSBSBRIGHTSIGNPLAYERMODEL_REHYDRATE";
/** @private */
export const BSBSBRIGHTSIGNPLAYERMODEL_RESET = "BSBSBRIGHTSIGNPLAYERMODEL_RESET";
/** @private */
export type BsBrightSignPlayerModelDispatch = Dispatch<BsBrightSignPlayerModelState>;
/** @private */
export interface BsBrightSignPlayerModelBaseAction extends Action {
    type: string;
    payload: {};
    error?: boolean;
    meta?: {};
}
/** @private */
export interface BsBrightSignPlayerModelAction<T> extends BsBrightSignPlayerModelBaseAction {
    payload: T;
}
/** @private */
export type BsBrightSignPlayerModelActionCreator<T> = ActionCreator<BsBrightSignPlayerModelAction<T>>;
/** @private */
export type BsBrightSignPlayerModelThunkAction<T> = (dispatch: BsBrightSignPlayerModelDispatch, getState: () => BsBrightSignPlayerModelState, extraArgument: undefined) => T;
/** @private */
export const bsBrightSignPlayerModelBatchAction: (action: BsBrightSignPlayerModelBaseAction[]) => BsBrightSignPlayerModelBatchAction;
/** @private */
export interface BsBrightSignPlayerModelBatchAction extends Action {
    type: string;
    payload: BsBrightSignPlayerModelBaseAction[];
}
/** @private */
export interface RehydrateBsBrightSignPlayerModelParams {
    newBsBrightSignPlayerModelState: BsBrightSignPlayerModelState;
}
/** @private */
export type RehydrateBsBrightSignPlayerModelAction = BsBrightSignPlayerModelAction<RehydrateBsBrightSignPlayerModelParams>;
export const bsBrightSignPlayerModelRehydrateModel: (bsBrightSignPlayerModelState: BsBrightSignPlayerModelState) => BsBrightSignPlayerModelAction<RehydrateBsBrightSignPlayerModelParams>;
/** @private */
export type ResetBsBrightSignPlayerModelAction = BsBrightSignPlayerModelAction<null>;
export const bsBrightSignPlayerModelResetModel: () => BsBrightSignPlayerModelAction<null>;

/** @module Model:base */
export type BsBspReducer = Reducer<BsBrightSignPlayerModelState>;
export const bsBspReducer: BsBspReducer;
export const isValidBsBrightSignPlayerModelState: (state: any) => boolean;
export const isValidBsBrightSignPlayerModelStateShallow: (state: any) => boolean;

/** @private */
export const bsBrightSignPlayerModelFilterBaseState: (state: any) => BsBrightSignPlayerModelState;
/** @private */
export const bsBrightSignPlayerModelGetBaseState: (state: BsBrightSignPlayerModelState) => BsBrightSignPlayerModelState;

/** @module Types:base */
/** @private */
export type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
export interface BsBrightSignPlayerState {
    bsdm: DmState;
    bsPlayer: BsBrightSignPlayerModelState;
}
/** @private */
export interface BsBrightSignPlayerModelState {
    hsms: HSM[];
    activeHStates: HStateMap;
}

export interface HStateMap {
    [hsmId: string]: string | null;
}

export type HSMList = HSM[];

export interface ArEventType {
    EventType: string;
    data?: any;
    EventData?: any;
}
export interface HSMStateData {
    nextState: HState | null;
}
export interface ArSyncSpecHash {
    method: string;
    hex: string;
}
export interface ArSyncSpecDownload {
    name: string;
    hash: ArSyncSpecHash;
    size: number;
    link: string;
}
export interface ArSyncSpecFiles {
    download: ArSyncSpecDownload[];
    ignore: any;
    delete: any;
}
export interface ArSyncSpec {
    meta: any;
    files: any;
}
export type ArFileLUT = {
    [fileName: string]: string;
};
export type LUT = {
    [key: string]: any;
};
export type SubscribedEvents = {
    [eventKey: string]: HState;
};
export type StateMachineShape = {};
export interface ArState {
    bsdm: DmState;
    stateMachine: StateMachineShape;
}

export enum BsBrightSignPlayerErrorType {
    unknownError = 0,
    unexpectedError = 1,
    invalidParameters = 2,
    invalidOperation = 3,
    apiError = 4,
    invalidModel = 5,
}
export class BsBrightSignPlayerError extends Error {
    name: string;
    type: BsBrightSignPlayerErrorType;
    constructor(type: BsBrightSignPlayerErrorType, reason?: string);
}
export function isBsBrightSignPlayerError(error: Error): error is BsBrightSignPlayerError;

export class HSM {
    hsmId: string;
    reduxStore: any;
    dispatchEvent: ((event: ArEventType) => void);
    topState: HState | null;
    activeState: HState | null;
    constructorHandler: (() => void) | null;
    initialPseudoStateHandler: ((args: any, reduxStore: any) => (HState | null)) | null;
    constructor(hsmId: string, reduxStore: any, dispatchEvent: ((event: ArEventType) => void));
    constructorFunction(): void;
    initialize(): void;
    Dispatch(event: ArEventType): (dispatch: any, getState: Function) => void;
}
export class HState {
    topState: null;
    HStateEventHandler: (event: ArEventType, stateData: HSMStateData) => string;
    stateMachine: HSM;
    superState: HState;
    id: string;
    constructor(stateMachine: HSM, id: string);
}
export function STTopEventHandler(_: ArEventType, stateData: HSMStateData): string;

